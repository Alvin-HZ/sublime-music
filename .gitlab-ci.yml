stages:
  - build-containers
  - test
  - build
  - deploy
  - verify
  - release

variables:
  GIT_SUBMODULE_STRATEGY: recursive

image: registry.gitlab.com/sumner/sublime-music/python-build:latest

lint:
  stage: test
  allow_failure: true
  before_script:
    - apt update
    - apt install -y python3-pip libcairo2-dev pkg-config
    - pip3 install -r dev-requirements.txt
    - pip3 install -e .
  script:
    - python3 setup.py check -mrs
    - pycodestyle

test:
  stage: test
  before_script:
    - apt update
    - apt install -y python3-pip libcairo2-dev pkg-config libgtk-3-dev libmpv-dev libglib2.0-dev gir1.2-notify-0.7
    - pip3 install -r dev-requirements.txt
    - pip3 install -e .
  script:
    - ./cicd/pytest.sh
  artifacts:
    paths:
      - htmlcov

build:
  stage: build
  before_script:
    - apt update
    - apt install -y python3-pip libcairo2-dev pkg-config
    - pip3 install -r dev-requirements.txt
  script:
    - python3 setup.py sdist
  artifacts:
    paths:
      - dist/*

build_flatpak:
    image: registry.gitlab.com/sumner/sublime-music/flatpak-build:latest
    stage: build
    script:
      - cd flatpak
      - ./flatpak_build.sh
    artifacts:
      paths:
        - flatpak/sublime-music-*.flatpak

deploy_pypi:
  image: python:3.6-alpine
  stage: deploy
  only:
    variables:
      # Only do a deploy if it's a version tag.
      - $CI_COMMIT_TAG =~ /^v.*/
  before_script:
    - 'pip install twine'
    - './cicd/create-pypirc.sh'
  script:
    # Upload to the test PyPi instance, then upload to the real one.
    - twine upload -r pypi_test dist/*
    - twine upload dist/*
  after_script:
    - echo "" > ~/.pypirc && rm -f ~/.pypirc

verify_deploy:
  stage: verify
  only:
    variables:
      # Only verify the deploy if it's a version tag.
      - $CI_COMMIT_TAG =~ /^v.*/
  script:
    - pip3 install sublime-music

publish_release:
  image: alpine
  stage: release
  only:
    variables:
      # Only verify the deploy if it's a version tag.
      - $CI_COMMIT_TAG =~ /^[vt].*/
  before_script:
    - apk add bash curl
  script:
    - ./cicd/publish-gitlab-release.sh

# Scheduled Jobs
# =============================================================================

# Create the Docker image for Flatpak builds.
flatpak_docker:
  image: docker:1.13
  stage: build-containers
  only:
    variables:
      - $REBUILD_FLATPAK_DOCKER == "True"
  services:
    - docker:dind
  script:
    - docker version
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/flatpak-build:latest ./cicd/flatpak-build
    - docker push $CI_REGISTRY_IMAGE/flatpak-build

# Create the Docker image for Python testing/builds.
python_docker:
  image: docker:1.13
  stage: build-containers
  only:
    variables:
      - $REBUILD_PYTHON_DOCKER == "True"
  services:
    - docker:dind
  script:
    - docker version
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/python-build:latest ./cicd/python-build
    - docker push $CI_REGISTRY_IMAGE/python-build:latest
